worker_processes  ${{NUM_WORKERS}};
error_log stderr notice;
daemon ${{DAEMON}};
env LAPIS_ENVIRONMENT;
user leafo users;

events {
  worker_connections ${{NUM_CONNECTIONS}};
}

http {
  include mime.types;
  lua_shared_dict page_cache 15m;

  upstream database {
    postgres_server ${{pg POSTGRESQL_URL}};
  }

  server {
    listen ${{PORT}};
    lua_code_cache ${{CODE_CACHE}};
    sendfile on;

    location = / {
      root static;
      try_files /index.html @lua;
    }

    location / {
      default_type text/html;
      set $_url "";
      content_by_lua_file "web.lua";
    }

    location /admin/ {
      auth_basic "Restricted";
      auth_basic_user_file secret/htpasswd;

      default_type text/html;
      set $_url "";
      content_by_lua_file "web.lua";
    }

    location @lua {
      default_type text/html;
      set $_url "";
      content_by_lua_file "web.lua";
    }

    location ~ /game/[\w-]+/[\w-]+/image/[\w-]+/[\w-]+ {
      root cache;
      set_by_lua $cache_fname "return 'resized_' .. ngx.md5(ngx.var.request_uri:match('^[^?]*'))";
      try_files /$cache_fname.png @lua;
    }

    location /static/ {
      if ($request_filename ~* \.eot$|\.ttf$|\.woff$) {
        add_header Access-Control-Allow-Origin *;
      }

      if ($request_filename ~* \.coffee$|\.scss$) {
        return 403;
      }

      gzip on;
      gzip_types application/x-javascript text/css;
      alias static/;
    }

    location = /favicon.ico {
      alias static/favicon.ico;
    }

    location = /robots.txt {
      alias static/robots.txt;
    }

    location = /query {
      internal;
      postgres_pass database;
      postgres_query $echo_request_body;
    }

    location = /proxy {
      internal;

      rewrite_by_lua "
          local req = ngx.req

          for k,v in pairs(req.get_headers()) do
              if k ~= 'content-length' then
                  req.clear_header(k)
              end
          end

          if ngx.ctx.headers then
              for k,v in pairs(ngx.ctx.headers) do
                  req.set_header(k, v)
              end
          end
      ";

      resolver 8.8.8.8;
      proxy_http_version 1.1;
      proxy_pass $_url;
    }
  }
}
